{"data":{"allMdx":{"nodes":[{"fields":{"slug":"/placeholder/","title":"This Is a Placeholder File for Mdx"},"frontmatter":{"draft":true},"rawBody":"---\ntitle: This Is a Placeholder File for Mdx\ndraft: true\ntags:\n  - gatsby-theme-primer-wiki-placeholder\n---\n"},{"fields":{"slug":"/TIL/2021-09-07/","title":"2021-09-07"},"frontmatter":{"draft":false},"rawBody":""},{"fields":{"slug":"/","title":"🤓"},"frontmatter":{"draft":false},"rawBody":"# 🤓\n\n- [TIL (Today I Learned)](https://github.com/dmydms/study/tree/main/TIL)  \n- [Algorithm](https://github.com/dmydms/study/tree/main/Algorithm)  \n- [Translation](https://github.com/dmydms/study/tree/main/번역)\n- [Reading](https://github.com/dmydms/study/tree/main/독서)\n- [etc.](https://github.com/dmydms/study/tree/main/기타)\n\n## Front-end\n\n- [Svelte](https://github.com/dmydms/study/tree/main/Svelte)\n\n## Back-end\n\n- [Django](https://github.com/dmydms/study/tree/main/Django)\n\n## DB\n\n- [DB](https://github.com/dmydms/study/tree/main/DB)\n\n## Language\n\n- [Python](https://github.com/dmydms/study/tree/main/Python)\n- [Rust](https://github.com/dmydms/study/tree/main/rust)"},{"fields":{"slug":"/Algorithm/","title":"Algorithm"},"frontmatter":{"draft":false},"rawBody":"# Algorithm\n\n- [Brute-force search, exhaustive search](https://en.wikipedia.org/wiki/Brute-force_search)\n    - In computer science, brute-force search or exhaustive search, also known as generate and test, is a very general problem-solving technique and algorithmic paradigm that consists of systematically enumerating all possible candidates for the solution and checking whether each candidate satisfies the problem's statement."},{"fields":{"slug":"/DB/MySQL 설치하기/","title":"MySQL 설치하기"},"frontmatter":{"draft":false},"rawBody":"# MySQL 설치하기\n\n1. `brew services list`\n    - 이미 동작하는 mysql이 있는지 확인하기. \n    - [Homebrew Services](https://github.com/Homebrew/homebrew-services)\n        - Manage background services with macOS' launchctl daemon manager.\n    - mysql 다른 버전이 동작하고 있으면 정지시키기.\n        - `brew services stop mysql`\n2. `brew update`\n    - [ ] TODO(question): 이 과정에서 꼭 해야하는가?\n    - [How do I update my local packages?](https://docs.brew.sh/FAQ#how-do-i-update-my-local-packages)\n        - Update local packages. First update all package definitions (formulae) and Homebrew itself.\n3. `brew install mysql`\n    - MySQL 설치\n4. `mysql --version`\n    - MySQL이 잘 설치되었는지 확인.\n5. `brew services start mysql`\n    - MySQL 서버 시작.\n    - cf. MySQL 서버 종료.\n        - `brew services stop mysql`\n        - `mysql.server stop`\n6. `mysql_secure_installation`\n    - [보안 설정.](https://dev.mysql.com/doc/refman/8.0/en/mysql-secure-installation.html)\n        - You can set a password for root accounts.\n        - You can remove root accounts that are accessible from outside the local host.\n        - You can remove anonymous-user accounts.\n        - You can remove the test database (which by default can be accessed by all users, even anonymous users), and privileges that permit anyone to access databases with names that start with test_.\n7. `mysql -uroot -p`\n    - `-uroot`\n        - `-u root`의 shorthand\n        - User for login if not current user.\n    - `-p` \n        - Password to use whㅌen connecting to server. If password is\n                      not given it's asked from the tty.\n\n8. ``` SQL\n    # mysql 데이터베이스 선택.\n    USE mysql;\n\n    # 유저 추가 및 비밀번호 지정.\n    CREATE USER 'name'@'localhost' IDENTIFIED BY 'blah';\n\n    # name 유저에게 '모든 권한'을 부여.\n    GRANT ALL PRIVILEGES ON *.* TO 'name'@'%' WITH GRANT OPTION;\n        #\n        # 이 단계에서 아래 에러 발생. \n        # ERROR 1410 (42000): You are not allowed to create a user with GRANT\n        #\n        # 🤔 문제 원인:\n        # 호스트가 'localhost'인 USER를 생성했으나, '%'에는 'localhost'가 포함되지 않기 때문에\n        # 서로 다른 USER라고 인식되어 권한 부여에 실패함. \n        #\n        # 💡 해결 방법:\n        # 호스트가 '%'인 USER를 새로 생성.\n        # \n        # 📝 참고 문서:\n        # https://stackoverflow.com/questions/10823854/using-for-host-when-creating-a-mysql-user\n\n    # 권한 지정 flush.\n    FLUSH PRIVILEGES;\n\n    # DB 추가.\n    CREATE DATABASE pabp;\n    ```\n\n-----\n\n## 참고 문서\n\ncf. MinsangK(twt. [@minsangk](https://twitter.com/minsangk))님 - [Backend Pracktice / Tutorial 1. 환경 설정](https://minsangk.notion.site/Tutorial-1-dbdfec1c1d4d41ea9a2537e5ae9a2351)  \ncf. https://dev.mysql.com/doc/  \ncf. https://dalya-tech.tistory.com/37"},{"fields":{"slug":"/DB/error/","title":"Error"},"frontmatter":{"draft":false},"rawBody":"> ERROR 1396 (HY000): Operation CREATE USER failed for 'id'@'localhost'\n- 원인: 등록하려는 id가 user 테이블에 이미 존재함\n- [해결책](https://stackoverflow.com/questions/5555328/error-1396-hy000-operation-create-user-failed-for-jacklocalhost\n)\n\n> ERROR 1410 (42000): You are not allowed to create a user with GRANT\n"},{"fields":{"slug":"/DevOps/AWS Copilot/","title":"AWS Copilot"},"frontmatter":{"draft":false},"rawBody":"# AWS Copilot\n\n## AWS Copliot이란?\n\nAWS App Runner, Amazon EC2, AWS Fargate 에서의 빌드와 배포 및 실행을 쉽게 이용할 수 있게 해주는 open source CLI.  \n\n## 사전 준비\n\n- Route 53 domain name\n- awscli 설치 및 인증\n  - `brew awscli`\n    - `~/.aws/config`, `~/.aws/credentials`가 생성되었는지 확인하기.\n  - IAM > Access management > Users 메뉴의 Security credentials 탭에서 Access key ID 발급 및 Access Key ID와 Secrete Access Key 복사.\n    - 주의, Secrete Access Key는 발급 직후 한번 밖에 조회 할 수 없음.\n  - `aws configure` 실행 후 아래 네가지 항목에 대하여 응답.\n    - cf. `-- profile [profile명]` 옵션을 사용하지 않으면 profile이 `default`로 저장됨.\n\n    - ```bash\n      AWS Access Key ID [None]: # IAM에서 발급 받은 Access Key ID\n      AWS Secret Access Key [None]: # IAM에서 발급 받은 Secret Access Key\n      Default region name [None]: # 서비스 리전. ex: ap-northeast-1\n      Default output format [None]: # ex: json\n      ```\n\n  - 간단한 aws 명령어 입력해서 접속 확인\n    - `aws s3 ls`\n\n## Application 배포하기\n\n이 문서는 [Deploy your first application](https://aws.github.io/copilot-cli/docs/getting-started/first-app-tutorial/) 문서를 참고함. \n\n\n- [본 문서](https://aws.github.io/copilot-cli/docs/developing/domain/)의 Attention  확인하기.  \n- `copilot app init --domain mydomain.com`\n- `copilot init` 실행 후, 아래 네가지 항목에 대해서 응답.\n  1. \"What would you like to name your application\"\n      - application 이름 설정.\n\n  2. \"Which service type best represents your service's architecture?\"\n      - Server 유형 선택.\n\n      - ```bash\n        Request-Driven Web Service (App Runner) # Serverless \n        Load Balanced Web Service (Internet to ECS on Fargate) # 최소 1대 서버 유지됨.\n        ```\n\n  3. \"What do you want to name this service?\"\n      - 서비스 이름.  \n      - cf. 하나의 application 내부에 여러 개의 서비스가 존재함.  \n\n  4. \"Which Dockerfile would you like to use for blah?\"\n      - docker file이 생성될 위치 혹은 이미 존재하는 docker image import.  \n      - port 설정.\n      - cf. 만약 custom path를 지정할 경우, 디렉토리가 자동으로 생성되지 않으니 미리 만들어두고 입력하기.  \n      - ex. `./services/[service name]`  \n\n  5. \"Would you like to deploy a test environment?\"\n      - 테스트 배포 환경을 위한 설정.\n\n- `copilot env init`\n  1. What is your environment's name?\n      - 환경 이름. \n      - ex. prod, test ...\n  2. Which credentials would you like to use to create [env name]?\n      - aws profile 선택\n\n- `copilot svc deploy`\n  - 배포.\n\n- `copilot app delete`\n  - application 삭제.  \n  "},{"fields":{"slug":"/Django/00_install/","title":"How to install Django"},"frontmatter":{"draft":false},"rawBody":"# [How to install Django](https://docs.djangoproject.com/en/4.0/topics/install/#how-to-install-django)\n\n1. Install Apache and mod_wsgi.\n    - production에 배포할 준비가 될 때 까지 설치하지 않아도 됨.\n\n2. Get your database running.\n    - 당분간 [SQLite](https://www.sqlite.org/index.html) 사용하기.]\n    - PostgreSQL 설치하기 ([참고 문서](https://www.sqlshack.com/setting-up-a-postgresql-database-on-mac/))\n      - `brew install postgresql`\n      (`postgres -V` 로 설치 확인.)\n      - `psql postgres` (postgresql 접속)\n      - Postgres DB Server 설정.\n\n        ```sql\n        # 유저 생성 \n        CREATE ROLE newUser WITH LOGIN PASSWORD ‘password’;\n\n        # role 변경 \n        ALTER ROLE newUser CREATEDB;\n\n        # DB 종료\n        \\q\n\n        # 새로 생성한 유저로 접속 \n        psql postgres -U newuser\n        \n        # DB 생성하기\n        CREATE DATABASE database_name \n\n        # DB 리스트 확인하기 \n        \\ l\n\n        # port 정보 확인하기 (Django `settings.py`에 넣을 때 확인하기 위해서.)\n        \\conninfo\n        ```\n\n3. Django 설치\n\n    a. [pip](https://pip.pypa.io/en/stable/) 설치.\n  \n    - 쉬운 설치 방법은 [standalone pip install](https://pip.pypa.io/en/latest/installation/) 참고.\n    - 이미 pip이 설치되어 있다면, 최신 상태 유지하기. (오래된 버전이면 설치가 동작하지 않을 수 있음.)\n\n    b. [venv](https://docs.python.org/3/tutorial/venv.html) 살펴보기.\n\n    - 이 도구는 독립된 Python 환경을 제공함.\n    - 관리자 권한 없이 패키지들을 설치할 수 있음.\n    - 가상환경 생성 방법은 [contributing tutorial](https://docs.djangoproject.com/en/4.0/intro/contributing/) 참고.\n        - 가상환경 생성 방법 요약  \n\n        ```bash\n        # 가상환경 생성\n        $ python3 -m venv ~/.virtualenvs/djangodev\n\n        # 가상환경 실행\n        $ source ~/.virtualenvs/djangodev/bin/activate\n        \n        # source가 동작을 안 할 경우 \n        $ . ~/.virtualenvs/djangodev/bin/activate\n\n        # 가상환경 종료\n        deactivate\n        ```\n\n    c. 가상환경 생성 및 실행 후 아래 명령어 입력.\n        `python -m pip install Django`\n\n4. distribution-specific package 설치\n    - 잘 모르겠음. [distribution specific notes](https://docs.djangoproject.com/en/4.0/misc/distributions/)를 참고.\n\n5. development version 설치\n    - 생략\n\ncf. 설치 확인하기.\n\n- python 실행.\n\n- ```python\n    >>> import django\n    >>> print(django.get_version())\n    ```\n"},{"fields":{"slug":"/Django/01_Requests_and_responses/","title":"Requests and responses"},"frontmatter":{"draft":false},"rawBody":"# Requests and responses\n\n## 예상 결과물\n\npoll application\n\n- 사람들이 득표수를 보고 투표할 수 있는 public site.\n- 투표를 추가하고 변경하고 삭제하는 admin site.\n\n## 프로젝트 생성하기\n\n1. 코드를 저장할 폴더로 `cd`\n2. `django-admin startproject mysite` 실행\n    - 주의. built-in Python, Django 컴포넌트로 프로젝트의 이름을 짓는 것은 피해야함.\n    - django (Django와 충돌)\n        - test (built-in Python package와 충돌).\n    - mysite 폴더 확인하기\n\n        ```python\n        # 디렉토리 구조\n        mysite/\n        manage.py\n        mysite/\n            __init__.py\n            settings.py\n            urls.py\n            asgi.py\n            wsgi.py\n        ```\n\n        - `mysite/` 프로젝트 root 폴더로 이 폴더의 이름은 Django에 영향을 미치지 않기 때문에 원하는 이름으로 변경해도 괜찮음.\n        - `manage.py/` Django project와 다양한 방법으로 interact 하는 command-line 도구. [django-admin and manage.py](https://docs.djangoproject.com/en/4.0/ref/django-admin/) 참고.\n        - 내부 `mysite/`는 프로젝트의 Python package 임. 이 폴더의 이름은 Python package 이름으로 이 안에있는 무언가를 import 할 때 필요함. (e.g. mysite.urls)\n        - `mysite/settings.py`: 장고 프로젝트에 대한 Settings/configuration. [Django settings](https://docs.djangoproject.com/en/4.0/topics/settings/) 참고\n        - `mysite/urls.py`: Django 프로젝트를 위한 URL 선언.  Django-powered(?) site의 \"table of contents\". [URL dispatcher](https://docs.djangoproject.com/en/4.0/topics/http/urls/) 참고.\n        - `mysite/asgi.py`: 프로젝트의 WSGI-compatible web servers를 위한 entry-point. [How to deploy with WSGI](https://docs.djangoproject.com/en/4.0/howto/deployment/wsgi/) 참고.\n\n## 개발 서버\n\n- root 폴더(outer `mysite/`)로 디렉토리 이동\n- `python manage.py runserver` 실행\n  - 주의. production 환경에서 이 서버를 사용하지 말 것.\n  - <http://127.0.0.1:8000> 방문 및 \"Congratulations!\" 페이지 확인\n\ncf.\n\n- port 변경\n  - `python manage.py runserver 8080`\n- server's IP 변경.\n  - `python manage.py runserver 0:8000`\n  - 0 은 0.0.0.0의 shortcut\n- Automatic reloading of runserver\n  - 서버 코드가 바뀔 때마다 자동으로 reload 되기 때문에 서버 재시작이 불필요함.\n\n## Polls app 생성하기\n\n- `manage.py`가 있는 디렉토리로 이동.\n- `python manage.py startapp polls` 실행\n  - cf. Projects vs. apps\n    - app: 어떤 일을 하는 web application으로 blog >system, database of public records 또는 a  small poll app이 있음.\n    - project: 설정과 app들의 집합.\n  \n  - ```python\n    polls/\n        __init__.py\n        admin.py\n        apps.py\n        migrations/\n            __init__.py\n        models.py\n        tests.py\n        views.py\n    ```\n\n## 첫번째 view 작성하기\n\n- ```python\n  # polls/views.py\n  from django.http import HttpResponse\n\n    def index(request):\n        return HttpResponse(\"Hello, world. You're at the polls index.\")\n  ```\n\n- 위 view를 호출하기 위해서는 URL을 연결해야하며, 연결을 위해서 URLconf가 필요함.\n  `polls/urls.py` 생성\n  - 생성 후 디렉토리 구조.\n\n  - ```python\n    polls/\n    __init__.py\n    admin.py\n    apps.py\n    migrations/\n        __init__.py\n    models.py\n    tests.py\n    urls.py\n    views.py\n    ```\n  \n  - `polls/urls.py` 작성\n\n     ```python\n     from django.urls import path\n\n     from . import views\n\n     urlpatterns = [\n        path('', views.index, name='index'),\n     ]\n     ```\n\n  - `mysite/urls.py` 작성\n\n    `polls.urls` 모듈에서 URLconf를 가리키기.\n\n    ```python\n    from django.contrib import admin\n    from django.urls import include, path\n\n    urlpatterns = [\n        path('polls/', include('polls.urls')),\n        path('admin/', admin.site.urls),\n    ]\n    ```\n\n    - `include()`는 다른 URLconfs를 참조하는 것을 허용함.\n    - Django는 `include()` 함수를 만날 때 마다, 해당 지점까지 일치하는 URL 부분을 잘라내고, 추가적인 처리를 위해서 URLconf에 나머지 문자열을 보냄.\n    - `include()`함수는 다른 URL 패턴들을 포함할 때 꼭 사용해야함.  **admin.site.urls**의 경우만 예외.\n\n    - `path()` 함수는 4개의 인자(argument)를 전달.\n      - `route`: (required) URL 패턴을 담고있는 문자열.\n      > route is a string that contains a URL pattern. When processing a request, Django starts at the first pattern in urlpatterns and makes its way down the list, comparing the requested URL against each pattern until it finds one that matches.\n      >\n      > Patterns don’t search GET and POST parameters, or the domain name. For example, in a request to <https://www.example.com/myapp/>, the URLconf will look for myapp/. In a request to <https://www.example.com/myapp/?page=3>, the URLconf will also look for myapp/.\n      - `view`: (required) Django가 일치하는 패턴을 찾으면, HTTPRequest 객체와 함께 특정 view function 을 호출함.\n      >When Django finds a matching pattern, it calls the specified view function with an HttpRequest object as the first argument and any “captured” values from the route as keyword arguments. We’ll give an example of this in a bit.\n\n      - `kwargs`: 이 튜토리얼에서 사용하지 않음.\n      - `name`: URL 이름을 지정하면 Django 다른 곳, 특히 템플릿 내에서 명확히 참조 가능. 이 기능을 사용하면 하나의 파일만 수정하면 URL pattern을 global changes 하는 것이 가능.\n\n  - `python manamge.py runserver`\n    - <http://localhost:8000/polls/> 접속 후, “Hello, world. You’re at the polls index.” 확인하기.\n\n**참고**\n인용구는 해석이 정확하지 않아 첨부함.\n"},{"fields":{"slug":"/Python/builtin-function/","title":"Builtin function"},"frontmatter":{"draft":false},"rawBody":"# Builtin function \n- [ord()](https://docs.python.org/3/library/functions.html#ord)\n    - 문자의 ASCII 코드를 반환\n- [chr()](https://docs.python.org/3/library/functions.html#chr)\n    - ASCII 코드를 문자로 변환\n- [map()](https://docs.python.org/3/library/functions.html#map)\n    - `n,m = map(int, input().split())`"},{"fields":{"slug":"/Svelte/Lifecycle/","title":"07. Lifecycle"},"frontmatter":{"draft":false},"rawBody":"# 07. Lifecycle\n\n## [onMount](https://svelte.dev/tutorial/onmount)\n\n- 모든 컴포넌트의 lifecycle은 컴포넌트가 생성될 때 시작되고, 컴포넌트가 소멸할 때 끝남.  \n\n- `onMount`는 컴포넌트가 DOM에 처음 렌더링 된 후에 실행. \n\n- SSR 때문에, `fetch`를 `<script>`의 최상위에 두는 것이 아니라 `onMount` 안에 둘 것을 추천.\n\n- `onDestroy`를 제외하고, lifecycle 함수들은 SSR 동안은 실행되지 않음. 이것은 DOM에 마운트된 후 지연 로드되어야 하는 데이터를 가져오기를 피할 수 있음.\n\n- [lifecycle 함수들은 콜백 함수가 컴포넌트 객체에 바인드 하기 위해서 컴포넌트가 초기화되는 동안 호출되어야한다.](#q1)\n\n- 만약 `onMount` 콜백 함수가 함수를 리턴한다면, 해당 함수는 컴포넌트가 소멸할 때 호출될 것이다.  \n\n## [질문](#q1)\n\n- Lifecycle functions must be called while the component is initialising so that the callback is bound to the component instance — not (say) in a setTimeout.\n  - 해석 및 전달하고자 하는 의미를 정확하게 모르겠음.\n  - 해석: lifecycle 함수들은 콜백 함수가 컴포넌트 객체에 바인드 하기 위해서 컴포넌트가 초기화되는 동안 호출되어야한다.\n\n## [onDestroy](https://svelte.dev/tutorial/ondestroy)\n\n- 컴포넌트가 소멸할 때 코드를 실행하려면 `onDestroy`를 사용.\n\n- 예를 들어, `setInterval` 함수를 컴포넌트가 초기화할 때 (작성중...)"},{"fields":{"slug":"/TIL/2020-09-17/","title":"2020-09-17 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2020-09-17 TIL\n**주요 작업**\n\n- Sequalize를 이용해 DB 생성 및 삭제\n- jest를 이용한 테스트 케이스 작성 및 테스트 (sequalize)\n\n**Sequalize**\n\n- define의 return값이 Model이 아니였음\n\n    → 무엇이 리턴되는지 모르겠을 때는 각 함수나 객체 등의 선언을 들어 가볼 것 \n\n- model에 직접 접근하기 위해서는 `sequalize.models.모델명` 과 같이 생성하면 됨\n\n- sync는 잠시 쓰는 편의 기능으로 생각하기 → [공식 문서](https://sequelize.org/master/manual/migrations.html) 읽기\n\n- InsertBulk, deleteBulk 처럼 여러개의 row를 한 번에 처리할 수 있는 기능 존재\n\n- logging:false, 로그 끌 수 있음\n\n- ORM을 사용하기 위해서 sql 잘 알아야함\n\n\n**DB**\n\n- delta update - 차이만 검사하고 업데이트\n\n    - 데이터 많고, 기존 데이터가 변경이 거의 안되는 상황일 때\n\n- DB에 넣을 때는 최대한 원본 데이터를 넣는 것이 좋음\n\n- Mysql은 DateOnly이기 때문에 timezone 고려하지 않음\n\n    - 시간정보 갖고 있으나 timezone 고려하지 않음\n    - datetime에 정보를 넣거나 뺄때 UTC라 생각하면 편함\n\n**Jest** \n\n- Test isolation - 각각의 테스트가 최대한 격리되는 것이 좋음\n- 유닛테스트에서 중요시 하는 것\n    1. Test isolation\n    2. test case 속도 \n        - 이런 관점 때문에 1번에 의해서 DB 스키마 생성 및 싱크(마이그레이션) 로직을 한번만 실행 되게끔 하는게 좋음\n\n- unit test 중에서 한번만 실행되게 하거나, A 실행 되고나서 B실행되게 하는 기능도 존재 `before, after 등`)\n- test 대신 it 넣어도 됨 \n    ```\n    it(“should do nothing blah”)\n    ```\n\n**etc.**\n\n- new Date(2020, 3-1, 1) → Date객체의 month는 0부터 시작되어서 이를 명시적으로 나타내줌\n    - 꼭 Date객체 뿐만이 아니여도 값에 대해서 명시적으로 표기하는 습관 들이기\n\n- Date객체에 timezone 포함\n\n- `Joda`: js date다루는 library\n\n- 함수가 짧을수록 변수 덜명확하게 써도됨\n\n- **JS version은 크게 두가지로 볼 수 있음**\n\n    1) Language spec(specification)\n    2) 실행 엔진"},{"fields":{"slug":"/TIL/2020-09-18/","title":"2020-09-18 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2020-09-18 TIL\n\n- **Mixed content warning**: http, https 혼합된 페이지에 대한 경고\n\n- 무언가를 수정하고 나서 안되면 수정한 것들을 수사\n\n- **Protocol analysis**: 행위를 하기 전에 뭘할지 말하면서 하는 것, 인지 과업 분석 가능\n\n- Static 경로는 nginx 구조를 통해 알 수 있음\n\n- 1024 이하의 포트들은 root권한이 아니면 열 수 없음\n\n- **admin에서 업로드한 일부 이미지가 출력되지 않은 원인**\n    1. 현재 인스턴스 내부의 서버에서 `root` 권한의 톰캣을 사용하고 있음. \n    2. 실행중인 nginx process의 경우 `blah` 권한으로 동작하고 있다.\n    3. admin 페이지에서 업로드한 이미지들은 톰캣을 먼저 거치면서 `root` 권한으로 서버에 업로드 된다.\n    4. nginx에서 업로드 된 이미지에 접근하고자 하면, `root` 보다는 권한이 낮은 상태이기 때문에 403 에러를 발생시킨다.\n        - 에러가 발생한 페이지를 잘 살펴보면 403 에러를 nginx가 발생시킨 것을 확인할 수 있다. 이런 요소들을 단서라 생각하고 잘 살펴보기.\n    5. crontab 사용으로 해결 (크로놀로..), 뭐쓴건지 다시 생각해보기.. \n\n- Bash !root($), root(#)\n\n- **VS Code** → 의식적으로 사용하기!!\n    - cmd + shift + e\n    - cmd + shift+ f\n    - cmd + p\n    - Win + d\n\n**경영/투자** \n\n- Death valley - 사업 3년을 넘기기 어려움\n\n- 자금 조달 단계\n\n    1. FF - max 5억 friend and family\n    2. Angel - 투자 자격증이 있으면 국가+투자자 \n    3. RND\n    4. series A, B .. "},{"fields":{"slug":"/TIL/2020-09-22/","title":"2020-09-22 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2020-09-22 TIL\n\n- API 호출하는 부분(View)은 테스트 케이스 작성 안함\n\n- Regular expression(정규 표현식) 공부하기\n\n- Syntatic sugar: 엔진에는 없는 기능인데 쓰기 편하게 사용\n    - `Promise.all`:  블록 단위\n    - `await` 라인 단위 \n    \n- **Gateway**: A gateway is a piece of networking hardware or software used in telecommunications for telecommunications networks that allows data to flow from one discrete network to another. (안와닿음, 공부하기) \n\n- **Connection pool**: DB connection of cache maintained so that the connections can be reused when future requests to the database are required.\n    - DB에 한번 연결을 하고 끊는 것 비용이 많이 들어서 connection pool 로 연결 관리 \n    - connection pool이 너무 적으면 request, server, DB 모두 놀고 있는 상태일 수 있음\n\n- `.map()` 원소 갯수 변경 불가능\n\n- `.filter()` 원소 내용 변경 불가능"},{"fields":{"slug":"/TIL/2021-02-03/","title":"2021-02-03 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2021-02-03 TIL\n\n- npm 패키지 global 설치는 현재 내가 사용중인 Node.js 디렉토리에 설치 되고, 모든 곳에서 사용할 수 있음.\n  - 모든 곳에서 사용할 수 있는 이유는 보통 Node.js 설치시 자동으로 내 쉘 설정(`.bash-profile` 혹은 `.zshrc`)에 해당 Node.js 디렉토리가 추가되기 때문.\n\n- Django는 Admin 페이지, 권한 때문에 사용한다.  \n  - 최대한 빨리 동작하도록.  \n  - aws `AWS_PROFILE=blah aws s3 ls`\n  - PROFILE을 회사 1개, 개인용 1개  \n  - `~/.aws`  \n    - credential, config file\n- [AWS copilot](https://aws.github.io/copilot-cli/)\n  - AWS App Runner 만 사용할 것 같음.\n  - App Runner, EC2, Fargate, cloud formation 등을 다 배워야 aws를 잘 다룰 수 있게 되는데 여러가지 기능 중에서 일부 기능만 사용.\n  - best practice\n  - crontab을 잘 만들기 어려움 (leader 선출 알고리즘 필요함.)\n\n- ``` json\n  { \n    headers: {\n      host: \"localhost:8080\",\n      connection: \"keep-alive\",\n      cache-control: \"max-age=0\",\n      sec-ch-ua: \"\" Not;A Brand\";v=\"99\", \"Google Chrome\";v=\"97\", \"Chromium\";v=\"97\"\",\n      sec-ch-ua-mobile: \"?0\",\n      sec-ch-ua-platform: \"\"macOS\"\",\n      upgrade-insecure-requests: \"1\",\n      user-agent: \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36\",\n      accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\",\n      sec-fetch-site: \"none\",\n      sec-fetch-mode: \"navigate\",\n      sec-fetch-user: \"?1\",\n      sec-fetch-dest: \"document\",\n      accept-encoding: \"gzip, deflate, br\",\n      accept-language: \"ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7\"\n    }\n  }\n  ```"},{"fields":{"slug":"/TIL/2021-07-09/","title":"2021-07-09 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2021-07-09 TIL\n\n## A/B Test\n2008, 오바마 대선 캠프 사례 \nhttps://blog.optimizely.com/2010/11/29/how-obama-raised-60-million-by-running-a-simple-experiment/\n\n- Call to action(CTA): Call to action is a marketing term for any design to prompt an immediate response or encourage an immediate sale. \n\n- Goal\n    - Click goal \n    - Visit goal\n    - Revenue goal\ncf. https://www.conversionreview.com/blog/testing-goals/\n\n- Multivariate test(다변량 테스트)\n- 교호작용(interaction):  한 요인의 효과가 다른 요인의 수준에 의존하는 경우를 말한다. \n- Google Optimize: A/B test tool\n"},{"fields":{"slug":"/TIL/2021-07-15/","title":"2021-06-16 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2021-06-16 TIL\n\n- `cw` : change word, linux command\n\n- 깃허브 계정 전환 방법\n    - `/.git/config` 파일 수정하기 \n"},{"fields":{"slug":"/TIL/2021-07-16/","title":"2021-06-16 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2021-06-16 TIL\n\n- 실험 심리학(experimental psycology): Experimental psychology refers to work done by those who apply experimental methods to psychological study and the processes that underlie it. \n- 극단치(outlier): In statistics, an outlier is a data point that differs significantly from other observations.\n- 가중합(weighted sum)"},{"fields":{"slug":"/TIL/2021-07-17/","title":"2021-06-17 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2021-06-17 TIL\n\n- 권력간격지수(PDI, Power Distance Index): 특정 문화가 위계질서와 권위를 얼마나 존중하는지를 나타냄. \n"},{"fields":{"slug":"/TIL/2021-07-25/","title":"2021-07-25 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2021-07-25 TIL\n\n- degit: straightforward project scaffolding\n- JS module bundler: 의존성이 있는 모듈 코드를 하나(혹은 여러 개)의 파일로 만들어주는 도구이다.\n    - rollup (https://rollupjs.org/guide/en/)\n    - vite (https://vitejs.dev/)\n    - cf. rollup이 vite 내부에 들어있음. rollup과 vite 차이 알아보기\n\n- `yarn create vite my-svelte-app --template svelte-ts` : vite로 프로젝트 생성\n- tree shaking: 아직 잘 모르겠음\n"},{"fields":{"slug":"/TIL/2021-08-05/","title":"2021-08-05 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2021-08-05 TIL\n\n- brand awareness(브랜드 인지도)\n- Build-Measure-Learn\n- remarkable marketing\n- 가트너 수용곡선\n- 협상시, 시스템/전략적 파트너 구분하기\n- 비용 종류\n    - 개발비용\n    - 월별 미니멈 개런티\n    - 수수료\n    - 기타: 판매비용, 사용료, 설계실행비용, 유지비용\n"},{"fields":{"slug":"/TIL/2021-08-06/","title":"2021-08-06 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2021-08-06 TIL\n\n- [logic keyed each blocks](https://svelte.dev/tutorial/keyed-each-blocks), 잘 이해 안됨\n- **invoke**: 호출\n- **back to back**: 연달아\n- [sparse matrix](https://en.wikipedia.org/wiki/Sparse_matrix)\n- sparse / dense\n  cf. 대비되는 말을 많이 알면 좋음\n- **John Wilder Tukey(존 튜키)**: 박스 플롯 개발자 \n- 탐색적 데이터분석(EDA, Exploratory Data Analysis) <-> 확증적 데이터분석 (CDA, Confirmatory~)\n- **HMR(Hot Module Replace)**: 브라우저를 새로 고치지 않아도 웹팩으로 빌드한 결과물이 웹 애플리케이션에 실시간으로 반영될 수 있게 도와주는 설정\n\n"},{"fields":{"slug":"/TIL/2021-08-07/","title":"2021-08-07 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2021-08-07 TIL\n- **halftone pattern(하프톤 패턴)**: 미묘하게 다른 도트들이 모여서 만드는 패턴 "},{"fields":{"slug":"/TIL/2021-08-09/","title":"2021-08-09 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2021-08-09 TIL\n\n**제 1정규형 목적**\n출처: [위키](https://ko.wikipedia.org/wiki/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4_%EC%A0%95%EA%B7%9C%ED%99%94#%EC%A0%95%EA%B7%9C%ED%99%94%EC%9D%98_%EB%AA%A9%EC%A0%81)  \n\n1. 고려되지 않은 삽입, 갱신, 삭제 의존에서부터 관계의 집합을 배제한다.\n2. 새로운 자료형이 나타날 때, 관계들의 집합의 재구성의 필요성을 낮추고, 그로 인하여 응용 프로그램의 생명주기를 연장한다.\n3. 사용자에게 관계 모델을 더욱 의미있게 한다.\n4. 관계들의 집합을 질의의 통계로부터 중립적이게 한다. 질의들은 시간이 지남에 따라 변경되기 때문이다.\n\n**Svelte tutorial**\n[6. Bindings / Text inputs](https://svelte.dev/tutorial/text-inputs)\n\na parent component can set props on a child component, <u>and a component can set attributes on an element, but not the other way around.</u>\n\n부모 컴포넌트는 자식 컴포넌트에 props를 설정할수 있고, <u>컴포넌트는 엘리먼트에 attribute을 설정할수 있으나 그러나 그 반대는 안된다?</u>\n\n- element: html 태그\n- attribute: 태그 속성 ex, `<a>`태그의 href\n- 엘리먼트가 어트리뷰트를 설정할 수는 없음? Top down의 반대가 안된다는것 == attribute로 props를 설정할 수 없다는 것일까요?\n\n> 리액트, 뷰, 스벨트 등 소위 Elm Architecture에서 파생된 모든 웹 프레임워크는 데이터가 흐르는 방향이 기본적으로 같음. 컴포넌트 간 데이터 흐름은 부모 컴포넌트에서 자식 컴포넌트로, 하나의 컴포넌트 내부에서의 데이터 흐름은 자바스크립트에서 HTML로 흐름. 이게 기본 흐름이고 여기에서 예외적으로 벗어나는 경우 존재(예: binding, store, context, event 등)\n\n[6. Bindings / Text inputs](https://svelte.dev/tutorial/text-inputs)\n\nwe *could* add an `on:input` event handler that sets the value of `name` to `event.target.value`, but it's a bit... boilerplatey.\n\n- 요래조래 입력해봤는데 on:input을 어떻게 쓸수있다는건지 모르겠다.\n- Event.target.value에 name 값을 설정하는 건데, 이게 보일러플레이티하다. 이 말이 정확히 뭔지 모르겠음. \n\n> binding 기능을 쓰지 않고 자바스크립트 변수랑 input 엘리먼트의 value를 양방향으로 동기화하려면 1) 자바스크립트에서 input의 초기값을 정해주고, 2) input 엘리먼트에 on:input 이벤트 핸들러를 등록해서 값이 바뀌면 그에 맞춰 자바스크립트 변수를 바꿔주는 식의 코드를 짜야 하는데, “매번 같은 코드를 길게 반복적으로 써야한다(boilerplatey란 이런 뜻)“는 문제가 있음. Binding 기능을 쓰면 이걸 간결하게 쓸 수 있음. 리액트의 controlled form이랑 같은 개념.\n\n[6. Bindings / Group inputs](https://svelte.dev/tutorial/group-inputs)\n\nRadio inputs in the same group **are mutually exclusive**; checkbox inputs in the same group form an array of selected values.\n\n- 서로 제외한다..? 라는말이 무슨말일까요?\n\n> mutually exclusive하다는 것은 서로 동시에 일어날 수 없다는 뜻. 보통은 “상호배제적“이라고 번역. 체크박스는 여러 개를 동시에 고를 수 있지만 라디오 버튼은 하나를 고르면 다른 게 해제됨. “원하는 옵션을 모두 선택하세요” 같은 UI는 checkbox, “하나의 옵션만 선택해주세요” 같은 UI는 radio로 구현. 논리연산으로 치면 XOR의 X가 “eXclusive”인데, 이것과 같다. (둘 다 참이거나 둘 다 거짓이면 거짓인 논리 연산).\n\n[6. Bindings / Select Bindings](https://svelte.dev/tutorial/select-bindings)\n\nNote that the `<option>` values are objects rather than strings. Svelte doesn't mind.\n\n- `<option>` 값은 문자열이 아니라 개체다: 이게 갑자기 왜나온 말일까요? 이 문장의 의미를 정확히 모르겠어요.\n\n> 원래 HTML에서는 `<option value=“blah”>` 이런 식으로 option 엘리먼트의 속성으로는 무조건 문자열만 허용. 그런데 스벨트에서는 value={someObject} 이런 식으로 객체를 통으로 담을 수 있다는 뜻.\n\nBe careful though — until the binding is initialised, `selected` remains undefined, so we can't blindly reference e.g. `selected.id` in the template.  \n\n조심해라, 바인딩이 초기화 될때까지, selected는 undefined로 남아있다. 그래서 우리는 템플릿안에서 selected.id를 맹목적으로 참조할 수 없다. \n\n- 이게 무슨말일까..? (직독직해 하는편이라.. 대충 씀..)\n\n> 컴포넌트가 실제로 DOM 트리에 붙기 전까지는(즉, onMount 전까지는) “selected” 변수의 값이 아직 undefined라는 뜻. 이 맥락에서 blindly란 “확인하지 않고“라는 뜻에 가까움. (맹목적으로 또는 장님처럼이라는 뜻인데, 장애차별적 표현). 그러니 undefined인지 확인을 하고 쓰라는 뜻. 다음과 같이: `<p>selected question {selected ? selected.id : ‘[waiting...]’}</p>`\n\n[6. Bindings / Contenteditable bindings](https://svelte.dev/tutorial/contenteditable-bindings)\n\n- Input 이랑 다른건가요? 어떨때 이런걸 쓸까요?\n\n> div에 contenteditable 속성을 주면 해당 div가 [WYSIWYG(What You See Is What You Get)](https://en.wikipedia.org/wiki/WYSIWYGhttps://en.wikipedia.org/wiki/WYSIWYG) 편집기로 바뀜. textarea랑 다른 점은 굵은 글씨, 기울임, 글자색, 배경색, 폰트 크기 등을 자유롭게 바꿀 수 있음. Google Docs처럼. 이건 svelte의 기능은 아니고 그냥 HTML5의 기능. svelte는 해당 기능을 쉽게 쓸 수 있도록 binding을 제공. textarea의 bind:value는 일반 텍스트(raw text), div 등의 bind:innerHTML은 HTML 텍스트.\n"},{"fields":{"slug":"/TIL/2021-08-10/","title":"2021-08-10 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2021-08-10 TIL\n\n- w3c, linked data: 데이터 품질이 좋다 = 연결성이 좋다.\n- **MECE**: Mutually, Exclusive, Collectively, Exhaustive\n- **[ICD(Classification of Diseases)](https://www.who.int/standards/classifications/classification-of-diseases)**: International Statistical Classification of Diseases and Related Health Problems \n- **URN(Uniform Resource Name)**: 통합자원 이름\n    - ex, ISBN\n    - URL(Uniform Resource Locator)이 가장 사용하기 좋고, 불가피하면 URN \n-  이터레이션, 마일스톤 중에 계획을 변경해야하는 상황이 왔을 때, \n    - 2주 기간을 늘리기 (기간을 길게)\n    - 원래 하기로 했던 것 보다 작은 무언가를 만들어내기 (목표를 작게)\n    \n- 빅쿼리, 데이터 스튜디오\n- [recipe ontology](https://www.bbc.co.uk/ontologies/fo)\n<br/>\n\n### Svelte\n\n[6.  Bindings / Each block bindings](https://svelte.dev/tutorial/each-block-bindings)\n\n- 무슨 문법\n\n```html\n<div class:done={todo.done}>\n```\n\n\n\n[6. Bindings / Dimensions](https://svelte.dev/tutorial/dimensions)\n\n아래 문서 내용 잘 모르겠음. 다시읽어야할 듯\n\nhttp://www.backalleycoder.com/2013/03/18/cross-browser-event-based-element-resize-detection/\n\n<br/>\n**UX/UI**\n- thumb zone\n- 시각적 위계와 정보의 위계를 고려해서 디자인하기\n"},{"fields":{"slug":"/TIL/2021-08-12/","title":"2021-08-12 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2021-08-12 TIL\n\n- **Self-Supervise learning** "},{"fields":{"slug":"/TIL/2021-08-17/","title":"2021-08-17 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2021-08-17 TIL\n\n- **optional variable assignments**\n  `AWS_PROFILE=blah aws s3 cp s3:blah.url`\n  `AWS_PROFILE` 환경변수 값이 blah이고, `aws` 이하 명령어를 실행할 때 선언한 `AWS_PROFILE` 환경변수 값(blah)을 사용한다. \n\n  cf. https://unix.stackexchange.com/questions/56444/how-do-i-set-an-environment-variable-on-the-command-line-and-have-it-appear-in-c\n\n- **Three way merge**: A three-way merge is performed after an automated difference analysis between a file \"A\" and a file \"B\" while also considering the origin, or common ancestor, of both files \"C\". It is a rough merging method, but widely applicable since it only requires one common ancestor to reconstruct the changes that are to be merged.\n\n- `sed -i '1 s/\\s//g' blah.csv`: 전체(`\\g`)에서, 첫번째 row의 `\\s` 를 `\\(빈칸)` 으로 바꿔서 blah.csv에 저장해라"},{"fields":{"slug":"/TIL/2021-08-26/","title":"2021-08-26"},"frontmatter":{"draft":false},"rawBody":"### 2021-08-26 목\n\n- **Q. `sveltekit:prefetch` 가 무엇인가?** \nhttps://www.notion.so/sveltekit-prefetch-e3f708ff15414f6f94edfcc69b11bb3a \n\n- **기준 표**를 만들고 서로 다른 평가자들이 대충 비슷하게 보는지로 맞춘다?\n\n- [Graphbiz](https://graphviz.org/)\n\n- **결측치(Missing Value)**: 데이터에 값이 없는 것을 뜻함 \n\n- **Recursion**: 무언가를 정의하는데 무언가가 도로 쓰임\n  - 수학/논리학/전산학에서 쓰이는 recursion이라는 개념은 대체로 비슷한 성격과 맥락을 띔\n\n- **Gang of four**: 공저자 4명\n\n- recursive enumerable set\n\n- [sequential, diverging, qualitative](http://googlemapsmania.blogspot.com/2021/03/color-schemes-for-maps.html)\n\n- cos similiarity\n\n- 추천서비스 알고리즘\n: 거의 대부분 n차원으로 몰아넣고 유클리드로 할지, cos로 할지 정함\n\n- [julia (programming language)](https://julialang.org/)"},{"fields":{"slug":"/TIL/2021-09-09/","title":"2021-09-09 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2021-09-09 TIL\n\n- time command \n\n- sort | unique -c | wc -l\n\n- Alt + . (VSC): problem solution suggestion\n\n  "},{"fields":{"slug":"/TIL/2021-09-20/","title":"2021-09-20 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2021-09-20 TIL\n\n- 왜 데이터에도 QA 절차가 필요한가? 를 읽고 번역.\nhttps://iced-farmer-712.notion.site/QA-489dddbd0d564c4fb90b0c7932cfff34"},{"fields":{"slug":"/TIL/2021-09-21/","title":"2021-09-21"},"frontmatter":{"draft":false},"rawBody":"### 2021-09-21 TIL\n\n**Q. `input()`, `sys.stdin.readline()` 차이점?** \n\n- `input()`은 line을 읽고, string 으로 변환하고 (후행 줄 바꿈 제거) 반환함. \n- `sys.stdin.readline()`은 사용자의 입력을 받지만 개행 문자도 입력받을 수 있음. 또한 입력 크기에 제한을 줌으로써 한 번에 읽어들일 문자의 수를 정할 수 있음.\n\n**에러**\n``` javascript\nif (typeof window === \"undefined\") return null;\n```"},{"fields":{"slug":"/TIL/2021-09-27/","title":"2021-09-27 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2021-09-27 TIL\n\n# 2021-09-27 TIL\n\n- fire: fire is a python library\n\n- git pull = git fetch + git merge\n\n```\nhint: Pulling without specifying how to reconcile divergent branches is\nhint: discouraged. You can squelch this message by running one of the following\nhint: commands sometime before your next pull:\nhint: \nhint:   git config pull.rebase false  # merge (the default strategy)\nhint:   git config pull.rebase true   # rebase\nhint:   git config pull.ff only       # fast-forward only\nhint: \nhint: You can replace \"git config\" with \"git config --global\" to set a default\nhint: preference for all repositories. You can also pass --rebase, --no-rebase,\nhint: or --ff-only on the command line to override the configured default per\nhint: invocation.\n```\n\n- reconcile: 조정하다\n- squelch: 끽소리 못하게 함\n\n- string to each type 변환 자동? \n- what is `:= ` operater?\n  - pseudo-code ?\n  - https://towardsdatascience.com/when-and-why-to-use-over-in-python-b91168875453\n\n```python\n# ex.A\nf_data = [f(x) for x in data if f(x) is not 4]\n\n# ex.B better than ex.A\ndata = [1,2,3,4]\nf_data = [y for x in data if (y := f(x)) is not 4]\n```\n\n\n\n- 주식 예측하는게 가능한 일인가?\n\n  - 어려움이 있다고 함\n\n  - 트위터 정서분석 등을 통해서 할 수도 있다는.. 카더라\n\n- 복리, seed 200만원, 2%씩, 200일 = 1억\n\n"},{"fields":{"slug":"/TIL/2021-09-28/","title":"2021-09-28 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2021-09-28 TIL\n\n**작업 요약**\n구글 스프레드 시트를 csv로 불러와서 키 참조 관계를 검사하고, validate 함수를 작성해서 적절한 값이 컬럼에 들어있는지 확인하기.\n\npython -m gsheets.cli validate_sheet_name\npython -m gsheets.cli\n\n**Exception test**\nhttps://docs.pytest.org/en/6.2.x/assert.html#assertions-about-expected-exceptions\n\n``` python\nwith pytest.raises(ValueError)\n    p.parse_float_or_none('INVALID_FORMAT')\n```\n\n"},{"fields":{"slug":"/TIL/2021-10-12/","title":"2021-10-12 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2021-10-12 TIL \n\n# 오늘 어디에 도전해보셨고, 무엇을 배우셨나요?\n- 도전 1. 이미 작성한 코드에 기능/논리적 오류가 없는지 등을 포함해서 전반적인 코드 리뷰\n    - 배운 점 1. 캠핑규칙\n    : 리팩토링을 할 때 떠올려야 할 문구. \n    \"도착했을 때보다 깔끔하게 정돈하고 떠난다\"\n    - 배운 점 2. (이런 예제를 배웠는데, 요약을 아직 못했음..)\n    ``` python\n    >>> a = [1,2,3]\n    >>> for x in a:\n    ...     print(x)\n    ... \n    1\n    2\n    3\n    >>> for x in a:\n    ...     print(x)\n    ... \n    1\n    2\n    3\n    >>> a = iter([1,2,3])\n    >>> next(a)\n    1\n    >>> for x in a:\n    ...     print(x)\n    ... \n    2\n    3\n    >>> for x in a:\n    ...     print(x)\n    ... \n    >>> a = iter([1,2,3])\n    >>> b = list(a)\n    >>> a\n    <list_iterator object at 0x10c398c70>\n    >>> b\n    [1, 2, 3]\n    >>> for x in a:\n    ...     print(x)\n\n    ```\n    - 배운 점 3. mkdir -p blah0/blah1/blah2\n    : 부모 디렉토리(blah0) 부터, 하위 디렉토리 전체를 생성하는 속성 (-p)\n\n\n# 학습하시면서 궁금하신 부분이나, 어려웠던 점은 뭘까요?\n- 내가 무엇을 알고 무엇을 모르는지 사소한 부분들을 그냥 지나치는 경우가 있었다. \n예를 들어, '로직 리뷰'를 함께 하자는 의견이 있었는데 이 '로직 리뷰'가 어떤 것을 의미하는지 정확히 인지하지 못했단 것을 알았다면(그러니까 동료와 내가 동일한 개념으로 이해했을거라는 확신이 없는 단어란걸 알았다면), 이해한 내용이 맞는지 한번 더 동료분께 확인할 수 있었을텐데 그걸 못했다. \n\n# 내일은 어떻게 해보고 싶으세요?\n- 내가 할 일이나 어떤 일들을 글로 좀 더 구체적으로 써보고 단어마다 정말 내가 아는 내용인지를 생각해볼 예정. 즉, 단어가 애매하면 그 단어가 무엇인지 내가 생각하는 내용을 작성해볼 예정. 작성해보고도 확실하지 않으면 동료분들께 여쭤보기. \n\n# 피드백\nhttps://dawn-bulb-f4b.notion.site/282b34f7f0ae4faa9c0be7c35054915e"},{"fields":{"slug":"/TIL/2021-10-13/","title":"2021-10-13 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2021-10-13 TIL \n# 오늘 어디에 도전해보셨고, 무엇을 배우셨나요?\n- 오늘은 도전은 못했다. \n- 업무를 할 때 조금 더 솔직하고 의사를 분명하게 말하자. \n# 학습하시면서 궁금하신 부분이나, 어려웠던 점은 뭘까요?\n- 오늘은 학습을 거의 못했다. \n- 내 실력을 객관적으로 알고싶은데 어떻게해야지 알 수 있는지 모르겠다. 사실 객관적으로 실력을 알고싶단 말이 불가능한 일인 것 같지만, 내가 스스로를 과대평가하고 있는 것은 아닌지 (혹은 반대이거나) 등을 알고싶다. \n# 내일은 어떻게 해보고 싶으세요?\n- 좀 더 업무에 집중을 잘 하고싶다. 감정에 휘둘리지 않으려고 노력할 것이다."},{"fields":{"slug":"/TIL/2021-10-14/","title":"2021-10-14 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2021-10-14 TIL \n\n# 오늘 어디에 도전해보셨고, 무엇을 배우셨나요?\n## 도전\n1. 프론트엔드, 백엔드 기초 지식 쌓기. \n2. (진행 중) csv 시트를 파싱하고, 여러 시트를 외래키로 이어 붙여서 하나의 시트 만들기. \n\n---\n\n## 배운 점 \n### 1. 프론트엔드, 백엔드 기초 지식 쌓기. \n\n[Technical Interview Guidelines for Beginners](https://github.com/JaeYeopHan/Interview_Question_for_Beginner)의 프론트엔드와 백엔드 기초지식 일부를 읽었음 \n\n\n**자바스크립트를 해석하고 실행시키는 엔진**\n\n- javascript를 해석하는 javascript engine과 웹 브라우저에 화면을 그리는 rendering engine(layout engine)은 다름. \n- **Rendering Engine (layout engine)**\n: HTML과 CSS로 작성된 마크업 관련 코드들을 콘텐츠로서 웹 페이지에 'rendering'하는 역할\n- **JavaScript Engine**\n: JavaScript로 작성한 코드를 해석하고 실행하는 **인터프리터.** 주로 웹 프라우저에서 이용되지만 최근에는 node.js가 등장하면서 server side에서는 **V8**과 같은 Engine이 이용됨. \n구글에서 개발한 V8을 비롯한 대부분의 JavaScript Engine은 크게 세 영역으로 나뉨.\n  - Call Stack\n    - 단 하나의 call stack 사용 \n    - Run to Completion\n    : 하나의 함수가 실행되면 이 함수의 실행이 끝날 때까지 다른 어떤 task도 수행될 수 없다는 의미. 요청이 들어올 때마다 해당 요청을 순차적으로 호출 스택에 담아 처리.\n  - Task Queue (Event queue)\n    - 자바스크립트의 런타임 환경에서는 처리해야하는 Task들을 임시 저장하는 대기 큐가 존재. Call stack이 비었을 때 먼저 대기열에 들어온 순서대로 수행.\n  - Heap\n    - 동적으로 생성된 객체는 힙에 할당됨. \n\n\n**Hoisting**\n\n- 변수의 정의가 그 범위에 따라 선언과 할당으로 분리되는 것을 의미.\n- 변수가 함수 내에서 정의되었을 경우, 선언이 함수의 최상위로, 함수 바깥에서 정의되었을 경우, 전역 컨텍스트의 최상위로 변경됨. \n- 선언문은 자바스크립트 엔진 구동시 가장 최우선으로 해석되며, 할당 구문은 런타임 과정에서 이루어지기 때문에 호이스팅 되지 않음.\n\n- 선언과 할당 \n\n```javascript\nfunction getX() {\n  console.log(x); // undefined\n  var x = 100;\n  console.log(x); // 100\n}\ngetX();\n\nfunction getX() {\n  var x;\n  console.log(x); // undefined\n  x = 100;\n  console.log(x); // 100\n}\ngetX();\n```\n\n\n**Closure**\n\n- 외부 함수 호출이 종료되더라도 외부함수의 지역 변수 및 변수 스코프 객체의 체인관계를 유지할 수 있는 구조를 클로저라고 함. 외부 함수에 의해 반환되는 내부함수를 가리키는 말 \n\n```javascript\nvar name = `Warning`;\nfunction outer() {\n  var name = `closure`;\n  return function inner() {\n    console.log(name);\n  };\n}\n\nvar callFunc = outer();\ncallFunc();\n// console> closure\n```\n\n\n**Promise**\n\n콜백이 중첩되는 경우가 발생했고, 이를 해결할 방안으로 등장한 것이 Promise 패턴. 비동기 작업들을 순차적으로 진행하거나 병렬로 진행하는 등의 컨트롤이 수월해짐. 예외 처리에 대한 구조가 존재하기 때문에 오류 처리 등에 대해 보다 가시적으로 관리할 수 있음. \n- [ ] [공식문서](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise ) 읽어보기 <!-- TODO: 공식 문서 읽어보기 -->\n<br/>\n\n\n### 2. csv 시트를 파싱하고, 여러 시트를 외래키로 이어 붙여서 하나의 시트 만들기. \n- makefile을 이용해서 `.xlsx` 파일을 `.csv`로 변환하고 칼럼 이름의 공백을 모두 제거하는 스크립트 작성. \n- `make filename.csv` 명령어를 입력하면 csv가 만들어지게끔 스크립트 작성. \n- [in2csv](https://csvkit.readthedocs.io/en/1.0.2/scripts/in2csv.html): 다양한 표 형태의 데이터 형식을 CSV로 변환하는 csvkit의 명령어 \n    ```makefile\n    filname.csv: raw.xlsx\n        in2csv raw.xlsx 3> /blah | tail -n +1 > raw.csv\n        gsed -i '1 s/\\s//g' raw.csv\n    ```\n- 위 명령어에서 원래 `sed` 명령어를 사용했으나, 아래와 같은 에러가 발생함\n    > sed: 1: \"fskfcdb/raw.csv\": invalid command code f\n    \n    Mac에 설치된 sed가 리눅스의 sed와 다르게 작동하기 때문에 생긴 문제였으며, `brew install gnu-sed`로 GNU 버전을 설치하면 잘 작동함.\n\n\n# 학습하시면서 궁금하신 부분이나, 어려웠던 점은 뭘까요?\n- 위 makefile 명령어에서, <!-- TODO: 질문하기 -->\n    - [x] 3> 이렇게 하면 어떻게 되는지?\n    - [x] /blah는 어떤 디렉토리?\n    - [x] `|`  파이프?였던 것 같은데 어떤 명령어인지 찾고, 다시 공부하기\n    - [x] tail -n +1 의 뜻? \n    - [x] 정규표현식 `'1 s/\\s//g'` 의미가 무엇인지?\n    - [x] gsed와 sed 차이는?\n    - [x] gsed 명령어의 i 속성은?\n\n# 내일은 어떻게 해보고 싶으세요?\n- 퇴근하고 정리하는 시간을 많이 들이지 않도록 업무하면서 중간중간 읽기 쉽게 정돈해서 작성하기 \n\n\n\n"},{"fields":{"slug":"/TIL/2021-10-16/","title":"2021-10-16 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2021-10-16 TIL \n# 오늘 어디에 도전해보셨고, 무엇을 배우셨나요?\n### 도전한 점  \n- 프로그래머스 해시, 완주하지 못한 선수 문제 여러가지 방법으로 풀어보기 \n### 배운 점 \n- 정기적으로 있는 일들에 대해서 참여할 시간이 다가오면 하기싫다는 생각이 정말 많이 들었었는데, 이것이 미래에 대한 상상과 현재가 불일치해서 발생하는 감정이라는 것을 알았음.\n  막상 그 일을 참여하고 있는 시간동안에는 괴롭지 않기 때문에, 괜찮다고 생각했던 과거의 경험을 생생하게 상상해보면 부정적인 감정이 줄어들 수 있다. \n- 알고리즘을 풀 때, 시도는 해보되 안풀리면 답지 보기. 답지를 옮겨두고 일부를 주석처리하고 실행해보고 발생하는 에러를 확인하고 해당 코드의 쓰임새를 확인하는 과정을 여러차례 반복하면서 알고리즘 공부를 하면 효율적임. \n\n# 학습하시면서 궁금하신 부분이나, 어려웠던 점은 뭘까요?\n- 궁금한 점은 코칭하면서 질문을 함. (아래 링크 참고)\n- 어려웠던 점은 없음. \n\n# 내일은 어떻게 해보고 싶으세요?\n- 오늘 [코칭받은 내용](https://dawn-bulb-f4b.notion.site/b074943606f247a4982e23515ba10e06)을 복습하고, 마음챙김 연습, 건포도 명상 trpg 에 대해서 찾아보기. \n- 알고리즘 해시 3문제 풀기.\n\n# 코칭 2주차\nhttps://dawn-bulb-f4b.notion.site/b074943606f247a4982e23515ba10e06"},{"fields":{"slug":"/TIL/2021-10-19/","title":"2021-10-19 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2021-10-19 TIL \n# 오늘 어디에 도전해보셨고, 무엇을 배우셨나요?\n### 도전한 점  \n- 여러가지 구글 시트나, 공공데이터를 파싱해서 합친 다음에 필요한 필드만 뽑아내서 csv로 저장하는 작업에 도전했다. \n- csv를 읽고, 파싱하고, 다시 csv를 쓰는 코드를 작성.\n  ```  python\n    with open('blah.csv') as f:\n        rows = {\n            row['code']: {\n                k: v\n                for k, v in row.items()\n                if k not in ['blah0', 'blah1'] and v != '0.0'\n            }\n            for row in list(csv.DictReader(f))\n        }\n    \n    keys = rows[0].keys()\n    # 아래와 같이 field의 순서를 정해줄 수도 있지만, \n    # python 3.6?인가 하여튼 어떤 버전에서부터는 dict에 값이 입력된 저장된 순서대로 출력된다고 함.\n    keys = ['field_name0', 'field_name1', 'field_name2'] \n    with open('blah.csv', 'w', newline='') as f:\n        dict_writer = csv.DictWriter(f, keys)\n        dict_writer.writeheader()\n        dict_writer.writerows(rows)\n  ```\n### 배운 점 \n- 일단 돌아가게 만들고, 더 나은 코드로 바꾸자. 처음부터 코드 퀄리티를 욕심내지 말자. \n  [Make it Work, Make it Right, Make it Fast.](https://wiki.c2.com/?MakeItWorkMakeItRightMakeItFast)\n\n- 일을 할 때, 왜 이 일을 하는지 목적을 제일먼저 이해하고, 어떤 일을 할 지 동료들과 생각의 싱크를 잘 맞춘 다음 방법에 대해서 찾는 순서로 일하기.\n- 어떤 일을 할 지 생각의 싱크를 맞추는 과정에서 커뮤니케이션 미스가 나지 않도록, 시각적으로 뭔가를 함께 보거나 작성해가면서 대화하면 서로의 생각을 이해하기가 더 수월한 것 같다. \n- [데이터 퀄리티 검증 도구, great_expectations](https://greatexpectations.io/expectations/expect_value_at_index)\n- python `==`, `is` 차이점\n  - `is`가 `==` 보다 빠르다. \n  - `is`가 더 [Pythonic](https://realpython.com/tutorials/best-practices/) 해 보인다. \n  - `==` 연산자는 value 또는 두 객체가 동일한지(equality)를 비교함. \n  - `is` 연산자는 두 변수가 메모리의 같은 객체를 가리키는지 확인함. \n  - cf. [Comparing Python Objects the Right Way: \"is\" vs \"==\"](https://realpython.com/courses/python-is-identity-vs-equality/#:~:text=The%20%3D%3D%20operator%20compares%20the,you're%20comparing%20to%20None%20.)\n\n\n# 학습하시면서 궁금하신 부분이나, 어려웠던 점은 뭘까요?\n- 요즘 시간관리를 잘 못하고 있다. 효율적이게 시간을 사용하지 못하고있다. \n- 요즘 자꾸 지치고 힘들다. 긍정적이게 생각하려고 노력하는데, 마음처럼 잘 안된다. 자주 우울하다.\n- 성취나 자기발전에 대한 욕심이 많아서 현재에 만족을 못하는 것 같아서 어렵다. \n- 표현을 하고싶은 욕구가 왜 생기는걸까?\n \n\n# 내일은 어떻게 해보고 싶으세요?\n- [x] 복습 못했던 [코칭받은 내용](https://dawn-bulb-f4b.notion.site/b074943606f247a4982e23515ba10e06)을 복습하기.\n- [ ] 알고리즘 해시 1문제 풀기.\n- [x] 기분 좋은 상태 유지하기. \n\n\n# 피드백\nhttps://dawn-bulb-f4b.notion.site/9e6df32fc0724c889b2f50d545d009b8\n\n"},{"fields":{"slug":"/TIL/2021-10-22/","title":"2021-10-22 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2021-10-22 TIL \n## 오늘 어디에 도전해보셨고, 무엇을 배우셨나요?\n### 도전한 점  \n- 이력서 업데이트하기\n- Refactoring 책 추천사와 서문 읽기 \n### 배운 점 \n- Marin Fowler, Refactoring 추천사와 서문을 읽었음. \n  - 추천사 요약\n  리팩토링은 함부러하면 위험하기(risky) 때문에, 체계적으로 해야한다. (다른 문제점이 있긴하지만) 리팩토링의 타겟이 디자인 패턴이 되면 좋다. 그리고 이 책은 리팩토링의 모든 원칙을 담은 책이 아님을 기억하기. \n  - 서문 요약\n    - **Refactoring** is the process of changing a software system in a way that does not alter the external behavior of the code yet improves its internal structure.\n    리팩토링은 외부 동작을 바꾸지 않고 내부 구조를 변경하는 소프트웨어 시스템 변화의 과정이다. \n    (내용 추가중..)\n\n- [STC(Small Talks Circles)](https://sites.google.com/site/philipskleung/small-talk-circles-stcs)\n- ``` python\n  if a:\n    for n in nums:\n      ...\n      \n  # 위와 같이 쓰기보단 아래와 같이 쓰는게 이해하기 쉬움\u001e\n\n  if not a:\n    continue\n\n  for n in nums:\n  ```\n- bash 스크립트\n  ``` bash\n  wc -l a.txt # a.txt의 라인수를 출력\n  wc -l b.txt \n  \n  env\n  # LC_ALL=C\n  # : environment variable that overrides all the other localisation settings \n  LC_ALL=C sort a.txt > a2.txt \n  LC_ALL=C sort b.txt > b2.txt\n\n  # 중복된 행이 있으면 하나만 남기고 삭제\n  uniq a2.txt\n  uniq a2.txt > a.txt\n  uniq b2.txt > b.txt\n\n  wc -l *.txt\n  rm a2.txt b2.txt\n  diff a.txt b.txt\n  ```\n\n- 단어\n  - conceive: 생각해 내다. \n\n\n## 학습하시면서 궁금하신 부분이나, 어려웠던 점은 뭘까요?\n- 스터디를 어떻게 하면 잘 만들고 활동을 잘 이어나갈 수 있을까? (Refactoring을 읽는 모임을 하나 만들고 싶음)\n- 오늘은 어려운 점이 딱히 없다. \n- 요즘 코드짜는 시간이 줄어들고 있다. ㅜㅜ \n- 사이드 프로젝트 어떤걸하면 좋을까? 질리지 않게 하루에 조금씩 꾸준히 오래 공부하고싶은데 어떻게 하면 그렇게 잘 할 수 있는지 궁금함.. \n\n\n## 내일은 어떻게 해보고 싶으세요?\n- 2021-10-19 피드백에 있는 내용들을 작성해볼 예정."},{"fields":{"slug":"/TIL/2021-10-26/","title":"2021-10-26"},"frontmatter":{"draft":false},"rawBody":"**pk 관리**\nDB에 row가 없는 경우, DB의 가장 큰 pk값을 받아와서 +1 해준 값을 pk로 지정\n``` python\nmax_pk = db.session.query(func.max(MiN.pk)).scalar() or 0\n```"},{"fields":{"slug":"/TIL/2021-10-28/","title":"2021-10-28 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2021-10-28 TIL \n## 오늘 어디에 도전해보셨고, 무엇을 배우셨나요?\n### 도전한 점\n- 기존 소스코드에 테스트 케이스 작성하기 \n### 배운 점 \n- [Martin fowler, The new cover](https://martinfowler.com/articles/refactoring-2nd-ed.html#new-cover)\n- 주소창에 `docs.new`, `sheet.new` 치면 각각 새로운 구글 docs페이지와 스프레드 시트가 켜짐.\n- VSCode, `ctrl + g` 해당 라인으로 이동 \n- Design by contract <!-- TODO: 찾아보기 -->\n- 테스트케이스 순서는 보통은 코드와 순서 맞춰서 작성\n- 테스트 케이스 작성할지 말지 고민될 때, 코드를 보고 걱정되면 테스트 케이스 작성하기\n- VSCode extensions, GitLens\n- font, Ligature가 있는 font 중에 코딩을 위한 폰트가 있음 <!-- TODO: VSCode에 적용하기 -->\n- pytest fixture decorator: pytest magic\n- **정적 분석**을 통해서는 같은 변수를 찾을 수 없다 <!-- TODO: 질문하기 -->\n- 구조적으로 단위 테스트 짜기 위해서 class 잘 활용하기\n- 이게 어떤 구존지 한번만 이해해도 테스트를 볼 수 있게끔 test에 사용되는 변수의 중복이 있다면, fixture로 빼기 \n- 테스트 커버리지: 전체 코드에 대해서 테스트케이스가 얼마나 있는지를 일컫는 말\n<!-- - 경계값과 일치하면 허용 1~5 사이, 1? 5? 일때는 에러나는지?  -->\n## 학습하시면서 궁금하신 부분이나, 어려웠던 점은 뭘까요?\n- 매직넘버? <!-- TODO: 질문하기 -->\n- ([Lifecycle / `onMount`](https://svelte.dev/tutorial/onmount)) Lifecycle functions must be called while the component is initialising so that the callback is bound to the component instance — not (say) in a `setTimeout`.\n: Lifecycle function들은 콜백을 컴포넌트 객체에 바인드 하기위해서 컴포넌트가 초기화되는동안 호출될 것 입니다.  not (say) in a `setTimeout`. <br/>\n이게 무슨 의미일까? <!-- TODO: 질문하기 -->\n  \n## 내일은 어떻게 해보고 싶으세요?\n- [ ] 오늘 궁금한 점에 대해서 찾아보기\n- [ ] 육하원칙에 의거한 구체적인 목표세우기\n"},{"fields":{"slug":"/TIL/2021-11-01/","title":"2021-11-01 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2021-11-01 TIL\n## 오늘 어디에 도전해보셨고, 무엇을 배우셨나요?\n### 도전한 점\n- 마틴파울러, 리팩토링 공부하기. \n### 배운 점 \n- [마틴파울러 리팩토링 1장 예제 실습(하는 중)](https://github.com/dmydms/study/commit/f1a9f7a55610eabcd1e15ca56540caac9175aaff) \n- 컴파일러는 코드가 못생겼는지 깔끔한지 신경쓰지 않는다. 하지만 시스템을 바꿀 땐, 인간이 관여하고, 인간은 코드를 신경쓴다. 안좋게 디자인된 시스템은 변경하기가 어려운데, 왜냐하면 무엇을 변경할지 또는 이런 변경들은 내가 원하는 동작을 하기 위해서 이미 존재하는 코드들과 어떻게 상호작용하는지 이해하기 어렵다. 그리고 무엇을 변경할지 이해하기가 어려우면, 실수를 하고 버그를 만들기 좋아진다.\n- 리팩토링을 시작하기전에 테스트를 만들어서 셀프체크해라.  \n## 학습하시면서 궁금하신 부분이나, 어려웠던 점은 뭘까요?\n- `.json` 파일을 불러서 변수에 저장하기. \n- 리팩토링 **영어 원서** 읽기.\n## 내일은 어떻게 해보고 싶으세요?\n- [ ] 영어로 된 짧은 기술 글 읽기. \n- [ ] 영작 1문장.\n- [ ] 리팩토링 1장 예제 마무리 짓기.\n"},{"fields":{"slug":"/TIL/2021-11-03/","title":"2021-11-1 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2021-11-1 TIL\n## 오늘 어디에 도전해보셨고, 무엇을 배우셨나요?\n### 도전한 점\n- 마틴파울러 리팩토링 \n- [지난 일일회고](https://github.com/dmydms/study/blob/main/TIL/2021-10-14.md) 질문 해결\n\n### 배운 점 \n- 마틴파울러 리팩토링: \n    - [동적 타입 언어 (dynamically-typed language)](https://developer.mozilla.org/en-US/docs/Glossary/Dynamic_typing)\n\n- [지난 일일회고](https://github.com/dmydms/study/blob/main/TIL/2021-10-14.md)\n    - 1: 표준 출력(stdout), 2: 표준 오류(stderr)\n    ex. `a 2> b` : a 프로그램을 실행한 결과 중 표준 오류로 출력된 내용들만 b 파일로 저장, 출력 전환(redirect) \n    - 파이프( | )\n    ex.  `a | b` : a를 실행하고 a가 표준 출력으로 내보낸 내용들을 b 프로그램의 표준 입력으로 전달\n    b 프로그램 입장에서는 a 프로그램의 출력과 동일한 내용을 사람이 직접 키보드로 입력한 것과 동일한 효과를 나타냄 (cf. 동일하지 않다는건?)\n    - `tail -n +1 a.txt`: a.txt의 \"처음 한 줄 빼고 몽땅 출력\"\n    - `tail -n -5 b.txt`: b.txt의 \"마지막 다섯줄만 출력\"\n    - sed 명령,  `\"s/\\s//g\"`: 치환해라('s'ubstitute) / 공백을(\\s) / 빈문자열로() / 몽땅('g'lobally), 모든 공백 문자를 제거\n    - gsed: brew로 GNU sed를 설치하면 부여되는 이름. 리눅스에서 sed라고 쓰면 맥에서 brew로 설치한 gsed와 동일함. 맥에 기본으로 설치된 sed는 BSD 계열(운영체제)의 sed라서 기능이 약간 다름. \n    - sed i 옵션: inplace, 수정된 결과를 원래 파일 그 자체에 바로 적용하라\n\n\n## 학습하시면서 궁금하신 부분이나, 어려웠던 점은 뭘까요?\n- With a dynamically typed language such as JavaScript, it’s useful to keep track of types—hence, my default name for a parameter includes the type name.\n  1. With 절(?) 구문 해석 방법? \n  2. — 대쉬 또는 하이픈이라고 하면 되나? 기호의 정확한 의미 \n  3. 이 문장이 바로 앞에 예제 코드에 aPerformance가 변수명인데, 이걸 타입이라고 말하는건가? 타입이라고 말하는게 정확하게 지칭하는게 뭐지? \n\n## 내일은 어떻게 해보고 싶으세요?\n- 리팩토링 2페이지 읽기 \n- Svelte 튜토리얼 프로젝트 만들기 "},{"fields":{"slug":"/TIL/2021-11-22/","title":"2021-11-22 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2021-11-22 TIL\n\n- [python random library](https://docs.python.org/3/library/random.html#examples)\n  - function 내부에서 random 함수를 가져다 쓰는 건 그리 좋지 않음. (예외가 생길 수 있음)\n  - [deterministic algorithm](https://en.wikipedia.org/wiki/Deterministic_algorithm#:~:text=In%20computer%20science%2C%20a%20deterministic,the%20same%20sequence%20of%20states.)\n\n- [Collins](https://www.collinsdictionary.com/dictionary/english/full-meal)\n  : 영어 예문 찾아 볼 때 보면 좋은 사이트 \n  \n- ROAS: Return on ad spend (ROAS) is a marketing metric that measures the amount of revenue earned for every dollar spent on advertising. \n"},{"fields":{"slug":"/TIL/2021-11-23/","title":"TODO: generator를 리턴하는 함수는 어떻게 테스트하는지 pytest에서 찾아보기"},"frontmatter":{"draft":false},"rawBody":"# TODO: generator를 리턴하는 함수는 어떻게 테스트하는지 pytest에서 찾아보기\n# TODO: zsh 터미널에서 가상환경 이름 보이게 하는 방법 찾아보기\n# TODO: Observable의 Genetic Algorithm에서 tsv 왜 썼는지 알아보기"},{"fields":{"slug":"/TIL/2021-11-26/","title":"2021-11-26 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2021-11-26 TIL\n```bash\nbrew install htop\nhtop\nps -ef | grep python\nkill -9 495837 \npyenv shell envname #뭐지?\n```"},{"fields":{"slug":"/TIL/2021-12-03/","title":"2021-12-03 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2021-12-03 TIL\n\n### Numpy\n- NumPy는 다른 Python 패키지에 의존하지 않지만, 가속 선형 대수(accelerated linear algebra) 라이브러리에 의존함. \n- [numpy.where](https://numpy.org/doc/stable/reference/generated/numpy.where.html): 특정 조건에 해당하는 값을 뽑고싶을 때 사용\n- shape[0](행 개수), shape[1](열 개수)\n\n``` python \n# TODO: a, 10*a가 어떻게 동작해서 이렇게 되는거지? \nnp.where(a < 5, a, 10*a)\narray([ 0,  1,  2,  3,  4, 50, 60, 70, 80, 90])\n```"},{"fields":{"slug":"/TIL/2021-12-04/","title":"2021-12-04 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2021-12-04 TIL\n\n- *classmethod* chain.from_iterable(*iterable*): 문자열 반복\n```python\n# from itertools import chain\ndef from_iterable(iterables):\n    # chain.from_iterable(['ABC', 'DEF']) --> A B C D E F\n    for it in iterables:\n        for element in it:\n            yield element\n```\n- [ ] [monolithic architecture](https://medium.com/koderlabs/introduction-to-monolithic-architecture-and-microservices-architecture-b211a5955c63)\n- blah = [list(np_plans[:, i]) for i in range(np_plans.shape[1])] "},{"fields":{"slug":"/TIL/2022-01-03/","title":"2021-01-03 TIL"},"frontmatter":{"draft":false},"rawBody":"# 2021-01-03 TIL \n- GNB(Global Navigation Bar), Hero bar \n- Hero banner\n- Product list \n- PDP(Product Detail Page), 상품 상세 페이지 \n  - list section \n\n<!-- TODO: 찾아보기 -->\n- edit distance operations\n  - 알고리즘(?) "},{"fields":{"slug":"/기타/Svelte React 기술 비교/","title":"Svelte vs React"},"frontmatter":{"draft":false},"rawBody":"# Svelte vs React\n\n- 컴포넌트 작성이 매우 편리하고, 작성해야하는 코드의 양이 현저히 적음.\n  - React는 컴포넌트를 만들기 위해서 hook method, class 에 대한 이해가 필요하고 컴포넌트를 생성할 때마다 반복적으로 작성해줘야하는 코드가 꽤 있는데 svelte는 매우 적음.\n- 공식 문서, 튜토리얼 등이 쉽고 직관적임\n  - 컴포넌트 작성 규칙도 Vanila js 를 사용하던 사람이면 금방 익힐 수 있는 수준.\n  - 문서, 튜토리얼 등이 React에 비해서 쉬움. \n  - life cycle도 react에 비해서 익히기 가벼운 느낌..? \n\n- html/css/vanila js 에 가까운 코드를 작성할 수 있음\n  - cf. React에 너무 익숙해지면, 온전한 Javascript를 알기에는 살짝 멀어지는 느낌.\n- 상태관리 하는 코드가 매우 간결하고 불필요한 hook method를 사용하지 않을 수 있음\n  - React - const [count, setCount] = useState(0)\n  - Svelte - const count = 0 (`reactive declaration` ($)을 사용하면 리액트랑 비교도 안되게 간결하게 코드를 작성할 수 있는 듯)\n- Top-level element가 한개일 필요가 없음\n  - React에서는 컴포넌트마다 한개의 태그(`<>`, `<div>` .. )가 여러개의 태그를 감싸줘야하는 규칙이 있지만, svelte는 그렇지 않음\n\n- virtual DOM 이 없음\n  - 명확하게 뭐가 좋은지 크게 와닿진 않지만, React의 경우 virtual DOM이 있어서 virtual DOM 자체를 알아야한다는 것 자체도 짐처럼 느껴짐\n  - 그리고 virtual DOM을 사용해서 장점이 뚜렷하게 느껴진다거나, 서칭을 했을 때 당장 알아들을 수 있을만큼 와닿는 장점을 잘 모르겠음 \n  - cf. \n    \" Virtual DOM이 있는 이유는 React나 Vue가 겉보기에는 reactive 하지만 내부 구현은 reactive하지 않아서, 상태가 바뀌면 매번 전체를 다시 평가해야 하기 때문(Svelte를 개발한 R. Harris의 [Rethinking Reactivity](https://www.youtube.com/watch?v=gJ2P6hGwcgo) 강연 참고). 이 과정의 비효율을 최소화하기 위해서 실제 DOM이 아닌 Virtual DOM에서 연산을 하고, 연산이 끝나면 DOM을 한 번에 갱신하는 방식으로 실행됨. 그런데 Svelte는 실제로 reactive하게 작동하기 때문에 이런 과정이 필요하지 않음. Virtual DOM이 없기 때문에 속도가 빠르고 메모리 사용량이 적고 (관련 코드도 없기 때문에) 네트워크로 전송되는 코드의 양도 줄어든다는 장점이 있음. 그런데 세 가지 장점 모두 현재 프로젝트에서는 크게 중요치 않아 보임. \"\n<br/>\n<br/>\n\n**Q. props thrilling?**  \n\n리액트를 사용할 때, 여러개의 컴포넌트에 걸쳐서 데이터를 내리는 상황이 왔을 때 어떻게 하는지? \n\nA. \"부모-자식 관계에서 여러 데이터를 주고 받을 일이 많다면 Context API, 부모-자식 관계와 관련 없이 데이터를 주고 받아야 한다면 Store API 사용하기. Context API는 되도록 최소한으로 쓰는 게 좋은 것 같음.\"  \n\n**Q, Type Script와 같은 타입 체크 도구를 어떻게 쓰는지?**  \n\n도입이 어렵다는 이야기를 보았음\n\nA. \"작년까지 좀 어려움이 있었으나, 2020년 7월 이후([Svelte <3 TypeScript](https://svelte.dev/blog/svelte-and-typescript))에 많이 좋아짐.\"  \n**Q. 와닿을 만한 단점이 있었는지?**  \n\nA. \"vscode + svelte + eslint + prettier + typescript 조합에서 문제가 안 생기게 하는데 어려움을 겪었음. 하지만 조합을 잘 찾아서 괜찮음\"  \n"},{"fields":{"slug":"/독서/설득의 심리학 1강/","title":"설득의 심리학1 - 1강"},"frontmatter":{"draft":false},"rawBody":"# 설득의 심리학1 - 1강\n\n- **고정행동 패턴(fixed-action patterns)**: 기계적이고 규칙적인 행동 패턴,  외부 자극에 반응하여 발생하는 특정하고 고정된 일련의 행동\n  - 유발 요인(trigger feature): 고정행동 패턴을 촉발시키는 요인\n\n- **휴리스틱스(heuristics)**: 모든 경우를 고려하는 대신 경험을 통해 나름대로 발견한 편리한 기준에 따라 일부만 고려해 문제를 해결하는 방법\n\n- **통제반응(controlled responding)**: 모든 정보를 철저히 분석한 후 반응하는 경향\n  - 여러 연구에서 사람들에게 정보를 신중하게 분석할 의지와 능력이 있는 사람들이 통제반응을 더 많이 보이는 것으로 밝혀짐 (Epley & Gilovich, 2006; Petty & Wegener, 1999)\n\n- **대조 원리(contrast principle)**: 2개의 대상을 차례로 제시할 때 둘 사이의 차이를 인식하는 방법이 달라진다는 원리\n  - 즉, 두번째 대상이 첫 번째 대상과 차이가 심할 경우에는 그 차이가 실제보다 '더' 크게 다가온다\n  - 정신물리학(psychophysics): 인지현상과 자극의 물리적 성질과의 관계를 조사하는 학문 분야 \n"},{"fields":{"slug":"/독서/읽을 책 목록/","title":"읽을 책 목록"},"frontmatter":{"draft":false},"rawBody":"# 읽을 책 목록\n\n### 개발\n- [ ] (읽는 중) Fowler Martin, Refactoring: Improving the Design of Existing Code \n- [ ] (읽는 중) Kent Beck | 김창준/강규영 옮김, Test-Driven Development: By Example (번역본)\n:\n- [ ] Kent Beck, Test-Driven Development: By Example (원서, pdf)\n- [ ] 최범균, DDD Start! \n- [ ] Kent Beck, SBPP\n\n### 심리학\n- [ ] (읽는 중) Robert Cialdini, (Influence: Science and Practice) 설득의 심리학 1\n- [ ] Robert Cialdini, (Influence: Science and Practice) 설득의 심리학 2\n- [ ] Robert Cialdini, (Influence: Science and Practice) 설득의 심리학 3\n- [ ] Nicholas Epley, 마음을 읽는다는 착각\n\n### 시각디자인\n- [ ] Colin Ware, Visual Thinking for Information Design\n\n### 철학\n- [ ] 정성훈, 괴물과 함께살기: 사회철학, 사회라는 괴물 이해하기\n- [ ] 박병철, 쉽게 읽는 언어철학: 프로그래머에게 특히 도움 될 것 같은 도서\n- [ ] 이한, 이것이 공부다: 진리 탐구란 무엇인가?\n- [ ] 장하석, 장하석의 과학 철학을 만나다: 과학과 과학사, 발전에 대해서\n- [ ] 김교빈, 이현구, 동양철학 에세이: 동양철학 다시보기 "},{"fields":{"slug":"/번역/webpack-Modules/","title":"Webpack"},"frontmatter":{"draft":false},"rawBody":"# [Webpack](https://webpack.js.org/concepts/modules/)\n\n## Modules\n\n출처, https://webpack.js.org/concepts/modules/\nmodular programming(프로그램의 기능을 독립적으로 분리하는 것을 강조하는 소프트웨어 설계 기법) 에서, 개발자들은 프로그램을 모듈이라고 불리는 기능의 discrete chunk로 쪼갭니다.  \n\n각각의 모듈은 인증, 디버깅 그리고 사소한 테스팅을 만드는 전체 프로그램보다 작은 표면적을 가지고 있습니다. 잘 써여진 모듈들은 견고한 추상화와 캡슐화 경계를 제공하고, 그럼으로 인해서 각 모듈은 전체 application에 걸쳐서 일관된 디자인과 명확한 목적을 가집니다.  \n\nNode.js는 처음부터 대부분 modular programming을 지원했습니다. 그러나 웹에서는 모듈들에 대한 지원이 더디게 진행되었습니다. 다양한 이점들과 제한들이있는 웹에 modular Javascript를 지원하는 다양한 도구들이 존재합니다. webpack은 이러한 시스템으로부터 학습된 교훈들을 기반으로 하고, 당신의 프로젝트의 모든 파일에 모듈의 개념을 적용합니다.\n\n## [What is a webpack Module?](https://webpack.js.org/concepts/modules/#what-is-a-webpack-module)  \n\nNode.js 모듈들과 대조되게, webpack 모듈들은 다양한 방법으로 그들의 의존성(dependencies)을 표현할 수 있습니다. 예:  \n\n- ES2015 `import` 문\n- CommonJS `require()` 문\n- AMD `define` and `require` 문\n- css/sass/less 파일 내부 `@import`문\n- stylesheet url(...) 또는 HTML `<img src=...>` 파일 내부 이미지 url\n\n## [Supported Module Types](https://webpack.js.org/concepts/modules/#supported-module-types)\n\nwebpack는 다음 모듈 타입들을 기본적으로 지원합니다:  \n\n- ECMAScript modules\n- CommonJS modules\n- AMD modules\n- Assets\n- WebAssembly modules\n\n게다가 웹팩은 다양한 언어와 로더(loader)를 통한 여러 전처리기로 작성된 모듈들을 지원합니다. 로더는 non-native 모듈들을 어떻게 처리하는지를 webpack에게 알려주고, 이러한 의존성들을 당신의 번들에 포함합니다.\nwebpack 커뮤니티는 널리 사용되는 다양한 언어와 언어 전처리기용 로더를 구축했습니다:  \n\n- CoffeeScript\n- TypeScript\n- ESNext (Babel)\n- Sass\n- Less\n- Stylus\n- Elm\n\n그리고 다른 것들도 많이 있습니다! 전반적으로 webpack는 사용자 정의(customization)에 대해서 강력하고 풍부한 API를 제공하며, 당신의 개발, 테스팅 그리고 production workflows에 대해서 아무런 의견 없이 모든 스택에 대해서 webpack을 사용할 수 있게합니다.\n\n전체 리스트를 보고싶다면 [로더 리스트](https://webpack.js.org/loaders/)를 보거나 [직접 작성하세요.](https://webpack.js.org/api/loaders/)  \n"},{"fields":{"slug":"/영어회화/week01/","title":"Week01"},"frontmatter":{"draft":false},"rawBody":"**2021-08-17**\n## We bear bears 1-1\n\n- Ice bear <u>meant to do</u> that\n  아이스베어는 일부러 그랬다\n\n- mean to do: 일부러 하다, 의도하다\n  = on purpose, intentionally\n\n- 사무실에 놓고왔다. \n  At home: 추상적인 장소 \n  behind: 추상적인 장소 이외의 모든 장소\n\n- loo 화장실 (영국)\n  toilet 공중화장실 느낌\n  restroom toilet 보다는 깔끔한 느낌 \n\n- 동사 + 동사 ing \n\n- for 동명사: ~하는 이유로 \n\n- like < go for < love \n\n- come along: (원하는대로) 되어가다, 나아지다 \n\n- mugshot: 몽타주 \n\n- take your time = take it down \n  네시간을 가져, 천천히 하다\n\n- That was close, fellas\n  그것 참 아슬아슬했어, 얘들아. \n\n- get = make it\n  가다, 도착하다 "},{"fields":{"slug":"/영어회화/week02/","title":"Week02"},"frontmatter":{"draft":false},"rawBody":"**2021-08-17**\n- sometime (= someday) : 언젠가\n  somtimes \n\n- you're <u>all</u> invited to the cave.\n\n- 동명사는 해석을 두가지로 할 수 있음 \n\n  1. ~를 하고 있는 중이다 + now etc.\n  2. ~할 예정이다. + today, soon etc.\n     We are inviting you to the cave today.\n\n- two-story house: 2층 집 (단독 주택)\n  studio apartment: 원룸\n\n- Let me: 가볍게 양해해달라는 뉘앙스로 스는 말 \n\n- finish (= get it done, put something to end, get it complete)\n  get my repory done\n  put my report to end \n\n- You promised me (that) <u>you'd</u> never do this again. \n\n- He told me (that) he'd never tell a lie again.\n\n- say\n\n  - 대상이 필요하지 않음 \n\n  speak, tell, talk \n\n  - 대상이 필요 \n\n  - Speak: 소수가 다수에게 말하는 느낌 \n\n- give a talk: 발표를 하다 \n\n- I'm so glad that you have a lot of interests \n  = I'm so glad <u>you're into</u> it \n\n- be into somtehing: (~에) 관심이 많다\n  = hooked on\n  = have a thing for \n\n- these days = nowadays\n\n- Bump into something/someone = run into \n  I ran into the shower on my way back home.\n\n- at/in/nearby\n\n  - nearby: 대상의 위치 \n  - near: 거리의 개념 (<-> far)\n\n- come over (to) : (~가 있는 장소로) 놀러 오다.\n- have, get, grab\n  - I'm eating dinner (x)\n  - Do you wanna have some coffee?\n  - Do you wanna grab some coffee? \n\n- And think of all the the Internet \n  - bask in (= hog): 누리다\n  - think of something: 상대적으로 조금 가볍게 생각하다\n    - I'm always thinking of 황정민: \n      아침에 눈떴는데 갑자기 황정민 생각이 났다\n  - think about something: 상대적으로 깊게 생각하다\n    - I'm always thinking about 김연경: \n      김연경이 훈련을 잘 하고 있을까? 김연경이 밥을 먹었을까? \n- Whoa! No need to roll out the D-word. Don't sweat it. I'm gonna sort this all out with Nom Nom. \n  - roll something out: 발표하다. (속마음을 얘기하다.) \n  - Don't sweat it.: 속 태우지마. 너무 힘빼지 마. 너무 그렇게까지 할 필요 없다.  (관용구, 땀 흘릴 것 없다.)\n  - Sort out: 문제를 해결하다. \n    - solve: 메뉴얼대로 풀 수 있는 것에 대해서 \n    - handle: 메뉴얼대로 풀 수 없는 것에 대해서 \n\n- by mistake = unintentionally \n\n- It doesn't really hurt. = it isn't really painful. \n- that sort of thing (= that type of things,  that kind of things.)\n\n"},{"fields":{"slug":"/번역/Svelte-tutorial/Dynamic attributes/","title":"1. Introduction / c. Dynamic attributes"},"frontmatter":{"draft":false},"rawBody":"# 1. Introduction / c. Dynamic attributes\n\n글자들을 조정하기 위해서 단순히 중괄호를 쓸 수 있는 것 처럼, 구성 요소의 attributes를 관리하기 위해서 역시 중괄호를 사용할 수 있습니다. \n\n우리의 이미지는 src가 없습니다. - 한번 넣어봅시다:  \n\n``` html\n<img src={src}>\n```\n\n더 낫군요. 하지만 Svelte는 warning을 줍니다:  \n`A11y: <img> element should have an alt attribute`\n\n웹 앱들을 만들 때, 예를들어 시력이나 운동장애가 있거나, 좋은 하드웨어나 원활한 인터넷이 없는 사람들을 포함하여 여러가지 가능성이 있는 사용자들이 접근할 수 있게 만드는 것이 가장 중요하다. 접근성(줄여서 a11y)을 똑바로 얻기가 항상 쉽지만은 않지만, Svelte는 만약 당신이 접근성이 떨어지는 마크업을 작성한다면, 당신에게 경고를 줌으로써 도움을 줄 것이다.\n\n이 경우에(주어진 예제 코드), 스크린 리더기를 사용하는 사람들 또는 느리거나 연결이 잘 안되는 인터넷을 가진 사람들을 위해 이미지를 설명하는 `alt` 속성이 누락되었습니다.  \n\n```html\n<img src={src} alt=\"A man dances.\">\n```\n\n우리는 속성들 안에 중괄호를 사용할 수 있습니다. \"{name} dances.\"로 바꿔보세요 - `<script>` 블록에 name 변수를 선언하는 것을 잊지마세요.  \n\n## Shorthand attributes\n\nsrc={src} 처럼 name과 value가 같은 속성은 흔합니다. Svelte는 이러한 경우에 편리한 shorthand를 제공할 것 입니다:  \n\n```html\n<img {src} alt=\"A man dances.\">\n```\n"},{"fields":{"slug":"/번역/Svelte-tutorial/Styling/","title":"Styling"},"frontmatter":{"draft":false},"rawBody":"<!-- 1. Introduction / d. Styling -->\nHTML에서 처럼, `<style>` 태그를 당신의 컴포넌트에 추가할 수 있습니다. `<p>` 태그에 몇몇 스타일들을 추가해봅시다. \n\n``` html\n<p>This is a paragraph.</p>\n\n<style>\n  p {\n    color: purple;\n    font-family: 'Comic Sans MS', cursive;\n    font-size: 2em;\n  }\n</style>\n```\n\n중요한 점은, 이러한 규칙들은 컴포넌트 범위로 동작합니다. 다음 단계에서 볼 내용들 때문에, 앱 모든 곳에 있는 `<p>` 엘리먼트의 스타일을 갑자기 바꿀 수 없을 것 입니다.  \n"},{"fields":{"slug":"/번역/Svelte-tutorial/Basics/","title":"1. Introduction / a. Basics"},"frontmatter":{"draft":false},"rawBody":"# 1. Introduction / a. Basics\n\n## 소개\n\nSvelte 튜토리얼에 오신걸 환영합니다. 이 튜토리얼은 당신이 빠르고, 작은 웹 애플리케이션을 쉽게 만들기 위해서 알아야하는 모든것을 가르쳐 줄 것입니다.  \n\n당신은 또한 [API docs](https://svelte.dev/docs)와 [예제](https://svelte.dev/examples#hello-world)들을 참고할 수 있습니다. 또는, 당신의 로컬 컴퓨터에서 직접 조작을 하는 것에 실증을 느낀다면, 60초만에 빠르게 [시작하는 방법](https://svelte.dev/blog/the-easiest-way-to-get-started)도 있습니다.  \n\n## Svelte란 무엇인가요?\n\nSvelte는 웹 애플리케이션들을 빠르게 빌드해주는 도구입니다.  \n\n이는 React와 Vue같은 자바스크립트의 프레임워크들과 비슷하며, 매끄럽고 상호작용하는(interactive) 사용자 인터페이스 구축을 쉽게 하기 위한 목표를 공유합니다.  \n\n그러나 중요한 다른점이 있습니다: Svelte는 실행 시간(run time)에 애플리케이션 코드를 해석하는 것이 아니라, 빌드 시간(build time)에 이상적인 JavaScript로 변환합니다. 이것의 의미는 당신은 프레임워크의 추상화의 성능 비용을 지불할 필요가 없다는 말이며, 또한 당신의 앱이 처음 로드될 때 패널티를 받을 필요도 없다는 것을 의미합니다.  \n\nSvelte로 당신의 전체 앱을 빌드할 수 있고 또한 이미 존재하는 코드베이스에 Svelte를 점진적으로 추가할 수도 있습니다. 또한 기존 프레임워크에서 종속성 오버헤드(overhead of a dependency) 없이 작업 어디로든지 독립형 패키지로서 컴포넌트를 이동시킬 수 있습니다.  \n\n## 튜토리얼 사용법\n\nSvelte를 이해하기 위해서 HTML, CSS 그리고 JavaScript에 대한 기본 지식이 필요합니다.\n\n튜토리얼을 진행하다 보면, 새로운 기능을 설명하기 위해서 설계된 작은 예제를 발견하게 될 것 입니다. 이후 챕터는 이전 챕터의 지식을 바탕으로 만들어지며, 그래서 처음부터 끝까지 진행할 것을 추천합니다. 만약 필요하다면, 상단 드롭다운을 통해서 이동할 수 있습니다. ('Introduction / Basics' 를 클릭하세요.)\n\n각각의 튜토리얼 챕터에는 지시 사항에 어려움을 겪을 때 클릭할 수 있는 '보여주세요' 버튼이 있습니다. 너무 의존하지는 마세요; 어디에 제시된 코드블럭을 두어야 할 지 이해함으로써, 그리고 직접 에디터에 코드블럭을 타이핑 해보면서 빠르게 배울 수 있을겁니다.\n\n## 컴포넌트 이해\n\nSvelte에서는, 애플리케이션이 하나 또는 하나 이상의 컴포넌트로 구성됩니다. In Svelte, an application is composed from one or more components. A component is a reusable self-contained block of code that encapsulates HTML, CSS and JavaScript that belong together, written into a `.svelte` file.(해석 다시하기. 이해 못함.) 코드 에디터에서 'hello world' 예시는 간단한 컴포넌트입니다.  \n"},{"fields":{"slug":"/번역/Svelte-tutorial/Adding data/","title":"1. Introduction / b. Adding data"},"frontmatter":{"draft":false},"rawBody":"# 1. Introduction / b. Adding data\n\n일부 정적 마크업을 단순히 렌더링하는 컴포넌트는 그다지 흥미롭지 않습니다. 데이터를 한번 넣어봅시다.\n\n우선, 컴포넌트에 스크립트 태그를 넣고 `name` 변수를 선언합니다:\n\n```html\n<script>\n  let name = 'world';\n</script>\n\n<h1>Hello world!</h1>\n```\n\n이제 우리는 `name`을 마크업에서 참조할 수 있습니다.  \n\n```html\n<h1>Hello {name}!</h1>\n```\n\n중괄호 안에서, 우리는 우리가 원하는 JavaScript를 모두 넣을 수 있습니다. 더 큰 인사말을 위해 name.toUpperCase()로 이름을 변경해 보세요.\n"}]}}}